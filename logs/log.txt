
                        Fourmilab Fireworks
                          Development Log

2021 October 8

Downloaded fireworks texture from Shutterstock:
    https://www.shutterstock.com/image-vector/firework-boom-flame-colorful-festive-seamless-726887620
under unlimited Web license as part of my subscription.  Dornloaded
into textures/shutterstock_726887620.eps.

Converted this image into a 5000x5000 PNG with:
    gs -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 \
        -dEPSCrop -dAlignToPixels=0 -dGridFitTT=2 -sDEVICE=pngalpha \
        -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -dUseCIEColor -r300x300 \
        -dProcessColorModel=/DeviceRGB -sOUTPUTFILE=fireworks.png \
        shutterstock_726887620.eps

Scaled the image to a 512x512 texture, fireworks_512.png.

2021 October 9

Fireworks sound effects:
    https://www.soundeffectsplus.com/product/fireworks-exploding-01/
    https://www.soundeffectsplus.com/product/fireworks-exploding-02/
    https://www.soundeffectsplus.com/product/fireworks-exploding-03/
    https://www.soundeffectsplus.com/product/fireworks-exploding-04/
    https://www.soundeffectsplus.com/product/fireworks-exploding-05/
    https://www.soundeffectsplus.com/product/firework-explosion-01/
    https://www.soundeffectsplus.com/product/firework-explosion-02/
    https://www.soundeffectsplus.com/product/firework-explosion-03/
    https://www.soundeffectsplus.com/product/firework-explosion-04/

2021 October 13

Replaced the base script_processor.lsl with the one from Gridmark
which supports the Script wait command to align with a timed
interval.

Rewrote the execution logic in firework_shell.lsl to replace the
llSleep() calls for sequencing with timed events and a state machine
to execute the events at each phase.  This guarantees the script
remains responsive to messages while it is executing the launch and
detonation of a shell.

Implemented the Legend command to set the floating text legend:
    Legend [ <r, g, b> ] Any text
If the text includes <channel>, it is replaced by the command channel
on which we're listening.

Changed the touch event handler to run a script called Touch.  This
allows you to do anything you wish with the event.

Revised the way shells are chosen by the launcher to pick
from the aShells list.  The list now contains the link numbers
of the shells.  When a shell is launched, its link is removed
from the list and it is returned when it sends a LM_FS_IDLE
upon completion of the launch and detonation sequence.  This
will allow handling of requests when no shells are available.

2021 October 14

Redesigned the Salvo command to be driven from the timer instead of
sleeping the main process.  This required adding logic to multiplex
the timer between its use in timing out menu listeners and salvos,
which is accomplished in the new function windCat() which is called
whenever a new timer task is enqueued.

Added the ability to cancel an in-progress salvo by specifying Salvo 0.

2021 October 16

Completed implementation of the "deferred launch" facility and, in
the process, discovered a nasty gotcha in list manipulation.  Whenever
the Launch command is about to fire a shell, it checks the number of
free shells in the aShells list and picks the oldest.  If the list is
empty, this means all shells are busy.  In that case, it appends the
Launch command (complete command string) onto the deferLaunch list
and immediately returns.  When a shell completes its detonation
sequence and sends a LM_FS_IDLE message back to the main script, that
script checks whether one or more deferred commands are waiting and,
if so, re-submits the oldest to processCommand().

The logic in the Launch command that removed a shell from aShells did
so in the following way:
    aShells = llList2List(aShells, 1, -1);
which works fine so long as aShells has two or more entries, but if
it has only 1, the start index is off the end of the list and
llList2List returns the item, not a null list as you'd expect.  In
a case like this, you must use:
    aShells = llDeleteSubList(aShells, 0, 0);
for it to behave properly in all circumstances including taking the
last item from a list.

With this code and fix, rapid-fire explicit Launch commands and salvos
properly wait for available shells if they exhaust the number present.

Implemented a Wait command which causes a script suspend if one or more
firework shells are busy or a salvo is in progress.  The script suspend
is released when all shells are idle and no salvo is active.  This is
for use in scripts which wish to wait for concurrent shell activity to
complete before, for example, closing the hat or starting a pause
before the next salvo.

2021 October 17

Added a LM_SP_SETTINGS message to communicate the trace and echo
settings to the Script Processor and added code to the main script to
send it whenever settings change.

2021 October 18

Declaration of an audio clip defined by a UUID didn't work because
it neglected to make the dictionary entry for the clip.  Fixed.

2021 October 20

Created local development Git repository in:
    ~/w/SecondLife/Fireworks/git
with:
    git init

Logged on to github.com.

Created a new repository:
    fireworks
with access URLs:
    HTTPS: https://github.com/Fourmilab/fireworks.git
    SSH:   git@github.com:Fourmilab/fireworks.git

Linked the local repository to the GitHub archive:
    git remote add origin git@github.com:Fourmilab/fireworks.git

Committed the *.md files in the repository root and the
marketplace/images files to which they link.

Confirmed that my local "git sync" command works with the remote
repository.

The documents in the repository root now work properly.

Made a test script and verified that "Script pause region" is working
as intended.  This makes it easy to set up a hat which announces its
arrival in any new region (allowing scripts) with a fireworks show.

Verified that the "Script resume" command works for escaping from a
timed wait or "Script pause touch".

The handling of the touch event in resuming after a "Script pause
touch" command conflicted with the launch of a script named "Touch" in
the main script.  I added code so the main script ignores touch events
if no "Script: Touch" is present in the inventory.  This means that you
can't use both meanings of touch simultaneously, but why would you want
to?

2021 October 21

Removed the Calculator and "Calc" command.  This was only included for
development and debugging and is no longer useful.

If the user set the salvo interval to 0 ("Set interval 0 0", for
example), the timer would be set to zero, cancelling the timer and
hanging up the script.  I added code which checks for a zero time and
forces the interval to 0.001 seconds.  Further, if the computed time to
the next shot is less than 0.01 seconds, we skip using the timer
entirely and, if a shell is available, launch immediately.  This makes
end of show blowouts work much better, assuming you have sufficient
shells.

Replaced the hard-coded setting of the floating text legend to the chat
channel with a Legend command in the Configuration script.  In the
process I ran into and fixed a bug in replacing "<channel>" in legend
text with the channel number: if "<channel>" was the last thing in the
string, the code which tried to replace it woulld trip over the old
gotcha that -1 means the end of string and not replace it properly.  I
rewrote the code to use llDeleteSubString() and llInsertString() to
avoid the problem.

The Salvo command was firing one shell too many.  Fixed.

Made the Fireworks Shell script respond to the Script Processor
messages LM_SP_STAT and LM_SP_SETTINGS to report its status and set the
local trace mode.  If trace mode is enabled, each launch is reported
with the ascent and burst effect and burst location.  The main script
now sends these messages to LINK_SET so all the shells receive them.

2021 October 21

Added the ability to specify arguments on the Salvo command which are
used on the Launch commands it performs.

Added a countdown indicator to the LaSalvo commands generated by the
Salvo command to indicate how many shots remain.

Added a "Play" command to immediately play an Audio clip declared in
the main script.  The clip is actually played in the Hat Top script
to avoid it clashing with other sound clips.

Given that we now have a script in Hat Top, I pressed it into service
as an auxiliary services script and offshored memory-intensive code
from the main script to it, including:
    *   Legend command
    *   Status command (main script sends numbers, Aux script edits)
Moving the Status command to an auxiliary script allowed removing
the large ef() function family from it, bringing our memory use down
to a comfortable 81%.

With the Status command no longer on the critical path, added display
of all status items a user is likely to wish to see.

2021 October 22

Performed initial Git commit of scripts, notecards, sounds, textures,
marketplace description, and this log.

Changed the default radius minimum and maximum to 2 and 5 metres
respectively.

Added a Delete command to remove an item of any kind from the
dictionary.  This allows removing an Optical declaration so it may be
replaced by a new one without having the items concatenated to the
existing declaration.

Added logic to the Optical Effect Compiler so that when the particle
effect is previewed by touching the compiler it removes its texture
and sets alpha to 0.2 so it won't interfere with the display of the
effect (which has its origin at the centre of the object).  When you
touch again to stop the effect, the original texture and alpha are
restored.  The texture and alpha are reset at state_entry() to restore
appearance if the object was reset while display a particle effect.

Revised the management of transparency of firework shells.  Previously,
they were transparent (invisible) while in the launcher, which meant
that if the user wanted to remove and unlink them, they were difficult
to select.  Now, whenever the shell is in the launcher it will be
visible.  It becomes invisible at the moment it explodes in the air,
remains invisible as it returns to the launcher, and then returns to
visibility (albeit hidden inside the launcher).  This may occasionally
not look as intended due to lag between the script running on the
simulator and the viewer's rendering of things, but that was true
before as well.

2021 October 23

Integrated mark-ups from RPOD into the User Guide.

Began development of a media player capability.  Added a script to the
Hat Brim prim which responds to a new LM_FS_MEDIA message by playing
the media on its face 1 (Black edge).

2021 October 24

Completed implementation of the media player facility.  Streaming
audio sources are declared with a URL command:
    URL uname https://....
The URL is taken as everything from the first to the last nonblank
character following the source name and may include spaces or any
other character and upper and lower case.  Declared URLs are stored
in the dictionary and may appear in Groups.

Embedded audio is played with:
    Embed name
where the name can either be an explicit URL or a group containing
URLs, in which case one is chosen at random.  If the stream includes
video content, as is the case for YouTube, it is hidden on the black
edge of the brim of the hat.  An Embed command with no name stops any
currently playing audio.

As with so many things in Second Life, the embedded media facility
leaves much to be desired.  There is no way to determine the length of
the stream, nor even to detect whether it is still playing by polling a
status.  When a stream ends, it remains attached to the prim until it
is explicitly removed.  Performing an Embed command while one is
already active just abruptly ends the playing source and jumps to the
new one.  And starting a source takes several seconds for no apparent
reason.  Still, if you're looking to play audio more than ten seconds
at a time (not to mention L$10 to upload each ten seconds), this is all
you've got.

2021 October 25

Added logic to the Fireworks Auxiliary script in Hat Top, with a little
help from the main script, to inform it when the launcher opens and
closes so that if an avatar is seated on the launcher when it opens,
they are kicked off and given a good push "to boot".  Further, any
attempt to sit on the launcher while it's open will result in an
immediate llUnSit().  The "Set top" command now sends a LM_FS_OPEN
message when the state of the top changes, allowing the auxiliary
script to know how it should behave.

Renamed the top prim "Fireworks Top" and the bottom "Fireworks Bottom"
so chat messages originating from them are better identified.

Cleared out media accidentally set on the wrong face of the bottom
prim, which caused it to start playing every time the owner entered
the region.

The "media on a prim" feature, activated by llSetLinkMedia(), is as
eccentric as you'd expect for Second Life.  First of all, unless you go
to the Firestorm Avatar/Preferences/Sound & Media/Media tab and set
Media auto-play to Enabled, you'll not hear media which is started by
another avatar or by yourself.

Second, at least with Firestorm, the sound that plays comes from a
hacked Web browser built into the viewer and is not muted when you
mute the viewer's audio output.  I don't know whether the media audio
can be muted or how to do it.

Third, if multiple avatars are near the object and one activates the
media, they will hear it start playing up to several seconds apart,
when their respective viewers get around to it.  So, forget about
trying to closely synchronise media audio with actions in-world.

Fourth, if you've played a media source and you try to replay it with
a subsequent call on llSetLinkMedia(), nothing will happen because the
parameters are the same.  To do this, have to llClearLinkMedia() to
clear out the parameters, then start the media you're replaying.  But
if you call the clear and then immediately set, that doesn't work,
presumably because some asynchronous process hasn't processed the clear
before the next set comes along, thinks it is a duplicate, and ignores
it.  You need a timed delay between the clear and the next set.  By
experimentation I determined than 0.1 second works and than 0.01 second
is unreliable (I've seen one avatar hear the replay and another not).

Fifth, if you have set media on a prim and an avatar has heard it play
to conclusion, but it remains set and the avatar then teleports away
(even within the same region) and subsequently returns (either by
teleporting or moving within the region) to the vicinity of the object,
the media will play again from the beginning.  Thus, the "media on a
prim" feature should not be thought of as an event which occurs
in-world, but rather an interaction between a property of the prim face
and an avatar, which triggers the viewer's playing the media attached
to the face when the avatar comes within range.  When the avatar leaves
(you do not even need to leave the region or teleport: just get far
enough away and then return within range) the viewer seems to forget
that the media has been played (presumably when the object containing
it goes out of render range), and then it plays again as you approach
the object.

To deal with all of this, I took the following steps.  The most
significant is the ability to declare running time on the URL
statement. The running time is appended to the URL with a
space-separated time expressed as [HH:MM:SS], for example:
    URL pingu https://www.youtube.com/embed/IAuKHcshJqw?autoplay=1 [1:08]
for a clip that plays for one minute and eight seconds.  Since the URL
command stores the entire nonblank string that follows the name, it
needs to special code to handle these specifications.  When the Media
Player receives such a URL, it detects the presence of the time
specification, removes it from the URL, parses it and saves the running
time of the clip, in seconds.  The time specification is then used to
start a timer which, upon expiry, does a llClearLinkMedia() to remove
the media from the prim and keep it from replaying if the user leaves
and returns or another avatar arrives.  This, of course, requires
another sloppy, rubbery, ad hoc hack because the clip does not actually
start to play for several seconds after it is attached to the prim, so
a timer set to the actual duration of the clip will result in it bring
truncated at the end.  I put in an experimentally determined latency
correction set at present to 6 seconds and called playLatency which is
added to the run time when computing the time before the clip is
cleared.  You know we're going to eventually have to make this
settable, don't you, and that even then some people are going to be
unhappy with it, right?

To deal with restarting clips, I added code which, when a new embed is
started, checks if an embed is already on the player prim (in other
words, has been started and not cleared by the timer).  If so, it is
cleared and the required delay (0.1 second) taken before starting the
new clip.

2021 October 26

Made the output logging the start of embedded media and the operation
of the squelch timer conditional on "Set trace on" in the main script.

To work around the unwanted automatic looping of MP3 files, I wrote
an auxiliary media player Web utility, which is presently installed
at Fourmilab.  You use it with a URL like (this is not the actual
URL, as I have yet decided whether, where, and how to host it):
    "https://www.fourmilab.ch/somewhere/mpt.html?v=https://example.com/mp3s/song.mp3&autoplay"
where you can specify any other attributes for an HTML5 <audio> tag
you wish after the URL name.  If you don't specify "autoplay", the
audio will not play, however, so don't forget it.  This will work for
any kind of media the viewer's built-in browser understands.  So far
I have tested it with:
    .mp3
    .webm
    .ogg
If the media source contains video, it will be ignored and only the
audio will be sent.  There does not appear to be any cross-site
content problems: I can play an MP3 file from archive.org via the
player at Fourmilab.

In Firestorm, if you display the Developer/Consoles/Debug Console you
will see log information as its media player progresses.  When you
try to play an unsupported media format, it will report an HTTP timeout
error.

2021 October 30

Captured video for the YouTube description.  The "gtk-recordmydesktop"
program we've been using up to now is not supported on Xubuntu 20.04,
so I installed "vokoscreenNG".  It has a different means of specifying
the window to be captured, and it mis-estimates the window boundary,
so it actually chops off the bottom of the window and captures its own
top border marker and beyond that.  You'll have to scale and shift the
clips in OpenShot to compensate.

2021 October 31

Produced the YouTube video:
    https://www.youtube.com/watch?v=bzBMy3w8WMU
The total running time is 5:10.

2021 November 1

Added chapter marks to the YouTube video.  Here are the instructions:
    https://support.google.com/youtube/answer/9884579?hl=en-GB

Added the YouTube video to the Marketplace listing.

Added a link to the YouTube video to the README.md file for the
repository.

2021 November 4

The code in the Optical Effect Compiler that processes rule, value
pairs from the llParticleSystem() argument list was parsing values
based upon the llGetListEntryType() result for the value item.  But if
the value was defined as a float but specified as an integer (without
decimal point or exponent), it was only being stored into the integer
value variable and when we went to output it as a float, we'd use the
float value, which was always zero.  I modified the code to, upon
seeing a value of type integer, to set both the integer and float
values so if it turns out to be interpreted as a float it is output
correctly.

Added code to the Optical Effect Compiler to implement the random and
previous HSV colour specification that the Firework Shell does.  This
allows development, testing, and direct deployment of effects using
these features (specified by negative .x components in the RGB vectors
specifying the colours for the PSYS_PART_START_COLOR and
PSYS_PART_END_COLOR rules).  As in the Firework Shell, when testing the
effect, the compiler chooses new random colours each time the effect
is started.
